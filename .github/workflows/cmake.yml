name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  App_Packages_Archive: launchy.zip
  App_Packages_Directory: AppPackages

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==3.1.*'
        py7zrversion: '>=0.20.2'
        version: '6.2.4'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -S ${{github.workspace}}/src -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}\build --config ${{env.BUILD_TYPE}}
    - name: copystuff
      continue-on-error: true
      run: robocopy "${{github.workspace}}\skins" "${{github.workspace}}\build\bin\Release\skins" /e /w:5 /r:2 /COPY:DATSOU /DCOPY:DAT /MT
    
    - name: Deploy
      run: windeployqt ${{github.workspace}}\build\bin\Release\launchy.exe
    
    # Archive the package
    - name: Create archive
      run: Compress-Archive -Path ${{github.workspace}}\build\bin\Release\* -DestinationPath ${{github.workspace}}\launchy.zip


    - name: Create Release
    
    on:
      push:
        branches:
          - main # Replace with the branch you want to trigger the release on
    
    jobs:
      create_release:
        runs-on: ubuntu-latest
    
        steps:
          - name: Check if release already exists
            id: check_release
            run: |
              TAG_NAME="test"
              RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" | jq -r .id)
              if [ -n "$RELEASE_ID" ]; then
                echo "Release $TAG_NAME already exists with ID $RELEASE_ID."
                echo "::set-output name=release_id::$RELEASE_ID"
              else
                echo "Release $TAG_NAME does not exist."
                echo "::set-output name=release_id::"
              fi

      - name: Create release if it doesn't exist
        if: steps.check_release.outputs.release_id == ''
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: test
          release_name: test
          draft: false
          prerelease: false


    # Upload release asset:   https://github.com/actions/upload-release-asset
    - name: Update release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}  # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ${{github.workspace}}\${{ env.App_Packages_Archive }}
        asset_name: 'launchy.zip'
        asset_content_type: application/zip
